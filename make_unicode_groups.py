#!/usr/bin/python
"""Generate C tables for Unicode Script and Category groups."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import unicode

_header = """
// GENERATED BY make_unicode_groups.py; DO NOT EDIT.
// make_unicode_groups.py >unicode_groups.c

#include "unicode_groups.h"
"""

_trailer = """"""


def calcRange(codes):
    codeCount = len(codes)
    if codeCount <= 1:
        return 0, 1, 0

    n, d = 1, codes[1] - codes[0]
    while n < codeCount and codes[n] - codes[n-1] == d:
        n += 1

    return 0, n, d


def MakeRanges(codes):
    """Turn a list like [1,2,3,7,8,9,11,13,15] into a range list [(1,3,1), (7,9,1), (11,15,2)]"""
    ranges = []
    while codes:
        s, e, d = calcRange(codes)
        ranges.append((codes[s], codes[e-1], d))
        codes = codes[e:]
    return ranges


def PrintRanges(type, name, ranges):
    """Print the ranges as an array of type named name."""
    print("static const %s %s[] = {" % (type, name))
    for lo, hi, s in ranges:
        print("\t{%d, %d, %d}," % (lo, hi, s))
    print("};")


def PrintGroup(name, codes):
    """Print the data structures for the group of codes.
  Return a UGroup literal for the group."""

    # See unicode_groups.h for a description of the data structure.

    # Split codes into 16-bit ranges and 32-bit ranges.
    range16 = MakeRanges([c for c in codes if c < 65536])
    range32 = MakeRanges([c for c in codes if c >= 65536])

    ugroup = "static const RangeTable %s = {" % name
    if len(range16) > 0:
        PrintRanges("Range16", name + "_range16", range16)
        latinOffset = len([1 for r in range16 if r[1] < 0xff])
        ugroup += " %s_range16, %d, %d" % (name, len(range16), latinOffset)
    else:
        ugroup += " 0, 0, 0"
    if len(range32) > 0:
        PrintRanges("Range32", name + "_range32", range32)
        ugroup += ", %s_range32, %d" % (name, len(range32))
    else:
        ugroup += ", 0, 0"
    ugroup += " };\n"
    print(ugroup)


def printRangeTableVariable():
    print("""
const RangeTable
*digitTable  = &Nd, // Digit is the set of Unicode characters with the "decimal digit" property.
*letterTable = &L,  // Letter/L is the set of Unicode letters, category L.
*lowerTable  = &Ll, // Lower is the set of Unicode lower case letters.
*markTable   = &M , // Mark/M is the set of Unicode mark characters, category M.
*numberTable = &N,  // Number/N is the set of Unicode number characters, category N.
*otherTable  = &C,  // Other/C is the set of Unicode control and special characters, category C.
*punctTable  = &P , // Punct/P is the set of Unicode punctuation characters, category P.
*spaceTable  = &Z,  // Space/Z is the set of Unicode space characters, category Z.
*symbolTable = &S,  // Symbol/S is the set of Unicode symbol characters, category S.
*titleTable  = &Lt, // Title is the set of Unicode title case letters.
*upperTable  = &Lu; // Upper is the set of Unicode upper case letters.""")


def main():
    print(_header)
    categories = unicode.Categories()
    for name in sorted(categories):
        PrintGroup(name, categories[name])

    scripts = unicode.Scripts()
    for name in sorted(scripts):
        PrintGroup(name, scripts[name])

    printRangeTableVariable()

    print(_trailer)


if __name__ == '__main__':
    main()
